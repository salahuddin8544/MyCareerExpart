"""
Django settings for mce project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

"""
 Important: Must Read this.
 01. The DEBUG and DEVELOPMENT_SERVER variables are not same thing. DEVELOPMENT_SERVER is custom for special purpose.
 02. Please read insturction of every enviroment variables to avoid any security risk
 03. To develop and solve a problem first, you first read whole settings.py files.
"""

from pathlib import Path
import os
import sys
import environ

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

# SECURITY WARNING: don't run with allowing all origin in production!
CORS_ORIGIN_ALLOW_ALL = env.bool("CORS_ORIGIN_ALLOW_ALL", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])

CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[
    'http://localhost:3000',
])

# Only allow when you are using the server for development purpose, it can be remote or local
DEVELOPMENT_SERVER = env.bool("DEVELOPMENT_SERVER", default=False)


SITE_ID = 1

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = env.bool("SECURE_SSL_REDIRECT", default=False) # rediret http to https if true

# by django allauth
#ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites' # Required by allauth
]

LOCAL_APPS = [
    'home',
    'users.apps.UsersConfig',
    "dashboard",
    'payment',
]

THIRD_FORCE_APPS = [
    'rest_framework',
    # 'rest_framework_jwt',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.linkedin_oauth2',
    'drf_yasg', # api docs
    'django_extensions',
    'allauth.socialaccount.providers.google',
    "corsheaders", # CORS policy
    'django_editorjs_fields',
]

INSTALLED_APPS += LOCAL_APPS + THIRD_FORCE_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Serve static in production without nginx or apache
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'mce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


if env.str('DATABASE_URL', ''):
    DATABASES = {
        'default': {**env.db(), **{'ENGINE': 'django.db.backends.postgresql'}}
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# When test, use sqlute as test DB
if sys.argv[1] == 'test':
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# more details can be found here http://whitenoise.evans.io/en/stable/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# AWS Bucket
# More details can be found here: https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION = env.str("AWS_STORAGE_REGION", "")

IS_AWS_S3 = (
    AWS_ACCESS_KEY_ID and
    AWS_SECRET_ACCESS_KEY and
    AWS_STORAGE_BUCKET_NAME and
    AWS_STORAGE_REGION
)

if IS_AWS_S3:
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN", "")
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "public-read") #(optional; default is None which means the file will inherit the bucket’s permission)
    AWS_LOCATION = "media" # store files under directory `media/` in bucket `my-app-bucket`, If not set (optional: default is ‘’)
    AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
    DEFAULT_FILE_STORAGE = env.str(
        "DEFAULT_FILE_STORAGE", "users.storages.CustomS3Storage"
    )


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# allauth config
ACCOUNT_EMAIL_VERIFICATION =  env.str("ACCOUNT_EMAIL_VERIFICATION", "optional")
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "dashboard_home"

ACCOUNT_ADAPTER = "users.auth_adapters.CustomAccountAdapter"
SOCIALACCOUNT_ADAPTER = "users.auth_adapters.CustomSocialAccountAdapter"

ACCOUNT_FORMS = { # Allauth Server-side signup rendered signup
    'signup': 'users.forms.ExtendedSignupForm',
}


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication', # https://django-rest-framework-simplejwt.readthedocs.io/en/latest/getting_started.html
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
}

if DEVELOPMENT_SERVER:
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'].append(
        'users.authentication.CsrfExemptSessionAuthentication' # WARNING: Not Secure
    )


AUTH_USER_MODEL = "users.User" # Custom  
  
EMAIL_HOST = env.str("EMAIL_HOST", "")
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", "")
EMAIL_PORT =  env.str("EMAIL_PORT", '')
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", False)
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", "webmaster@localhost")

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

IS_SMTP = (
    EMAIL_HOST and EMAIL_PORT
)

if IS_SMTP:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"


USE_API_DOCS = env.bool("USE_API_DOCS", True)

SWAGGER_SETTINGS = {
    # in the input field, the value should look like: Token <YOUR TOKEN>
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}
SITE_ID = 1


LINKEDIN_CLIENT_ID = env.str("LINKEDIN_CLIENT_ID", "")
LINKEDIN_SECRET_KEY = env.str("LINKEDIN_SECRET_KEY", "")
LINKEDIN_REDIRECT_URL = env.str("LINKEDIN_REDIRECT_URL", "http://127.0.0.1:8000/accounts/linkedin_oauth2/login/callback/")

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': env.str('GOOGLE_LOGIN_CLIENT_ID', ''),
            'secret': env.str('GOOGLE_LOGIN_SECRECT_KEY', ''),
            'key': ''
        }
    },
    'linkedin_oauth2': { # https://django-rest-auth.readthedocs.io/en/latest/installation.html#linkedin
    "APP": {
        "client_id": LINKEDIN_CLIENT_ID,
        "secret": LINKEDIN_SECRET_KEY,
    },
},
}
STRIPE_SECRET_KEY = env.str("STRIPE_SECRET_KEY", "")
STRIPE_PUBLISHABLE_KEY = env.str("STRIPE_PUBLISHABLE_KEY", "")

